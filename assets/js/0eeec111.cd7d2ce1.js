"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1070],{8247:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>x,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"theories/Regular Expressions","title":"Regular Expressions","description":"SMTLIB2 standard The theory of unicode strings and regular expressions","source":"@site/docs-smtlib/02 - theories/08 - Regular Expressions.md","sourceDirName":"02 - theories","slug":"/theories/Regular Expressions","permalink":"/z3guide/docs/theories/Regular Expressions","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/z3guide/tree/main/website/docs-smtlib/02 - theories/08 - Regular Expressions.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Regular Expressions","sidebar_position":8},"sidebar":"smtlibSidebar","previous":{"title":"Sequences","permalink":"/z3guide/docs/theories/Sequences"},"next":{"title":"Unicode Characters","permalink":"/z3guide/docs/theories/Characters"}}');var t=s(4848),i=s(8453),o=s(6851);const d={title:"Regular Expressions",sidebar_position:8},c="Summary of Operations",l={},a=[];function h(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"SMTLIB2 standard"})," ",(0,t.jsx)(r.a,{href:"https://smt-lib.org/theories-UnicodeStrings.shtml",children:"The theory of unicode strings and regular expressions"})]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["The sort constructor ",(0,t.jsx)(r.code,{children:"RegEx"})," takes as argument a sequence type.\nThe set of regular expressions over strings is thus ",(0,t.jsx)(r.code,{children:"(RegEx String)"}),";\nit is synonymous with the sort ",(0,t.jsx)(r.code,{children:"RegLan"})," defined in the ",(0,t.jsx)(r.a,{href:"https://smt-lib.org/theories-UnicodeStrings.shtml",children:"SMTLIB2 format"}),"."]}),"\n",(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"summary-of-operations",children:"Summary of Operations"})}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Operation"}),(0,t.jsx)(r.th,{children:"Brief Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(str.to.re s)"})}),(0,t.jsxs)(r.td,{children:["Convert string to regular expression accepting ",(0,t.jsx)(r.code,{children:"s"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(str.in.re s r)"})}),(0,t.jsxs)(r.td,{children:["Determine if ",(0,t.jsx)(r.code,{children:"s"})," is in the language generated by ",(0,t.jsx)(r.code,{children:"r"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"re.allchar"})}),(0,t.jsx)(r.td,{children:"The regular expression accepting every string"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"re.nostr"})}),(0,t.jsx)(r.td,{children:"The regular expression rejecting every string"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.range ch1 ch2)"})}),(0,t.jsxs)(r.td,{children:["The range of characters (represented as strings) between ",(0,t.jsx)(r.code,{children:"ch1"})," and ",(0,t.jsx)(r.code,{children:"ch2"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.++ r1 r2 r3)"})}),(0,t.jsx)(r.td,{children:"Concatenation of regular expressions"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.* r)"})}),(0,t.jsx)(r.td,{children:"Kleene star"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.+ r)"})}),(0,t.jsx)(r.td,{children:"Kleene plus"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.opt r)"})}),(0,t.jsxs)(r.td,{children:["Zero or one use of ",(0,t.jsx)(r.code,{children:"r"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"((_ re.loop lo hi) r)"})}),(0,t.jsxs)(r.td,{children:["from ",(0,t.jsx)(r.code,{children:"lo"})," to ",(0,t.jsx)(r.code,{children:"hi"})," number of repetitions of ",(0,t.jsx)(r.code,{children:"r"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.union r1 r2)"})}),(0,t.jsx)(r.td,{children:"The union of regular languages"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.inter r1 r2)"})}),(0,t.jsx)(r.td,{children:"The intersection of regular languages"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(seq.to.re s)"})}),(0,t.jsxs)(r.td,{children:["Convert sequence to regular expression accepting ",(0,t.jsx)(r.code,{children:"s"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(seq.in.re s r)"})}),(0,t.jsxs)(r.td,{children:["Determine if sequence ",(0,t.jsx)(r.code,{children:"s"})," is in the language generated by ",(0,t.jsx)(r.code,{children:"r"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(as re.all R)"})}),(0,t.jsxs)(r.td,{children:["The regular expression of sort ",(0,t.jsx)(r.code,{children:"R"})," accepting every sequence"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(as re.empty R)"})}),(0,t.jsxs)(r.td,{children:["The regular expression of sort ",(0,t.jsx)(r.code,{children:"R"})," rejecting every sequence"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.of.prop p)"})}),(0,t.jsxs)(r.td,{children:["Sequences of length 1 where character satisfies predicate ",(0,t.jsx)(r.code,{children:"p"}),". The sort of ",(0,t.jsx)(r.code,{children:"p"})," is ",(0,t.jsx)(r.code,{children:"(Array C Bool)"}),", where ",(0,t.jsx)(r.code,{children:"C"})," is the character sort."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.replace_re s r dst)"})}),(0,t.jsxs)(r.td,{children:["Currently not supported: replace left-most smallest occurrence matching ",(0,t.jsx)(r.code,{children:"r"})," in ",(0,t.jsx)(r.code,{children:"s"})," by ",(0,t.jsx)(r.code,{children:"dst"})]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"(re.replace_re_all s r dst)"})}),(0,t.jsxs)(r.td,{children:["Currently not supported: replace, traversing left-to-right, smallest matches, all occurrences matching ",(0,t.jsx)(r.code,{children:"r"})," in ",(0,t.jsx)(r.code,{children:"s"})," by ",(0,t.jsx)(r.code,{children:"dst"})]})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"re.range"})," operator expects two strings each encoding a single character.\nFor example ",(0,t.jsx)(r.code,{children:'(re.range "a" "\\u{ff}")'})," is a valid range of characters,\nwhile ",(0,t.jsx)(r.code,{children:'(re.range "aa" "")'})," is the empty language."]}),"\n",(0,t.jsx)(o.A,{input:'{"lang":"z3","highlight":"clojure","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"(simplify (re.range \\"a\\" \\"\\\\u{ff}\\"))\\n(simplify (re.range \\"aa\\" \\"\\"))","result":{"output":"(re.range \\"a\\" \\"\\\\u{ff}\\")\\nre.none\\n","error":"","status":"z3-ran","hash":"720b23380d4be97c1a903e5894304bab577aa265"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,t.jsxs)(r.p,{children:["For  compatibility with the SMTLIB2 format\nZ3 also accepts expressions of the form ",(0,t.jsx)(r.code,{children:"(re.loop r lo hi)"}),".\nZ3 understands only the meaning of these terms when ",(0,t.jsx)(r.code,{children:"lo, hi"})," are\ninteger numerals."]}),"\n",(0,t.jsx)(r.h1,{id:"what-not-to-expect-of-regular-expressions",children:"What (not) to expect of regular expressions"}),"\n",(0,t.jsxs)(r.p,{children:["The default solver for regular expressions unfolds membership relations of regular expressions lazily.\nIt uses ",(0,t.jsx)(r.a,{href:"https://dl.acm.org/doi/abs/10.1145/3453483.3454066",children:"symbolic derivatives"})," .\nThis approach works for many membership and non-membership constraints, but is not a complete\nprocedure when membership constraints are combined with constraints over strings.\nNote that the syntax allows forming ",(0,t.jsx)(r.em,{children:"symbolic"})," regular expressions that contain uninterpreted non-terminals.\nIt also does not handle regular expressions symbolic sequences (it allows\nto express non-regular languages).\nThus, the string ",(0,t.jsx)(r.code,{children:"s"})," in ",(0,t.jsx)(r.code,{children:"(str.to.re s)"})," should be\na string literal. You can write formulas with equalities over\nregular expressions. Z3 is a decision procedure for equalities and disequalities between non-symbolic regular expressions."]}),"\n",(0,t.jsx)(r.h1,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.p,{children:"The maximal length is 6 for a string of length 2 repeated at most 3 times."}),"\n",(0,t.jsx)(o.A,{input:'{"lang":"z3","highlight":"clojure","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"(declare-const a String)\\n(push)\\n(set-info :status sat)\\n(assert (str.in.re a ((_ re.loop 1 3) (str.to.re \\"ab\\"))))\\n(assert (= (str.len a) 6))\\n(check-sat)\\n(get-model)\\n(pop)\\n\\n(push)\\n(set-info :status unsat)\\n(assert (str.in.re a ((_ re.loop 1 3) (str.to.re \\"ab\\"))))\\n(assert (> (str.len a) 6))\\n(check-sat)\\n(pop)","result":{"output":"sat\\n(\\n  (define-fun a () String\\n    \\"ababab\\")\\n)\\nunsat\\n","error":"","status":"z3-ran","hash":"857e87ab96547b4f005d1ceb5bd8080e9f7cf763"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'})]})}function x(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);