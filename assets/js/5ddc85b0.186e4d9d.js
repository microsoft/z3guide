"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2040],{4351:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Z3 JavaScript Examples","title":"Z3 JavaScript","description":"The Z3 distribution comes with TypeScript (and therefore JavaScript) bindings for Z3.","source":"@site/docs-programming/01 - Z3 JavaScript Examples.md","sourceDirName":".","slug":"/Z3 JavaScript Examples","permalink":"/z3guide/programming/Z3 JavaScript Examples","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/z3guide/tree/main/website/docs-programming/01 - Z3 JavaScript Examples.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Z3 JavaScript","sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Introduction","permalink":"/z3guide/programming/Z3 Python - Readonly/Introduction"}}');var s=t(4848),o=t(8453),i=t(6851);const a={title:"Z3 JavaScript",sidebar_position:1},l=void 0,c={},d=[{value:"Warmup",id:"warmup",level:2},{value:"Propositional Logic",id:"propositional-logic",level:2},{value:"Integer Arithmetic",id:"integer-arithmetic",level:2},{value:"Dogs, cats and mice",id:"dogs-cats-and-mice",level:3},{value:"Arrays",id:"arrays",level:2},{value:"Prove <code>Store(arr, idx, val)[idx] == val</code>",id:"prove-storearr-idx-validx--val",level:3},{value:"Find unequal arrays with the same sum",id:"find-unequal-arrays-with-the-same-sum",level:3},{value:"Uninterpreted Functions",id:"uninterpreted-functions",level:2},{value:"Prove <code>x = y implies g(x) = g(y)</code>",id:"prove-x--y-implies-gx--gy",level:3},{value:"Disprove <code>x = y implies g(g(x)) = g(y)</code>",id:"disprove-x--y-implies-ggx--gy",level:3},{value:"Prove <code>x = y implies g(x) = g(y)</code>",id:"prove-x--y-implies-gx--gy-1",level:3},{value:"Disprove that <code>x = y implies g(g(x)) = g(y)</code>",id:"disprove-that-x--y-implies-ggx--gy",level:3},{value:"Solve sudoku",id:"solve-sudoku",level:2},{value:"Arithmetic over Reals",id:"arithmetic-over-reals",level:2},{value:"Non-linear arithmetic",id:"non-linear-arithmetic",level:2},{value:"Bit-vectors",id:"bit-vectors",level:2},{value:"Using Z3 objects wrapped in JavaScript",id:"using-z3-objects-wrapped-in-javascript",level:2}];function u(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The Z3 distribution comes with TypeScript (and therefore JavaScript) bindings for Z3.\nIn the following we give a few examples of using Z3 through these bindings.\nYou can run and modify the examples locally in your browser."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"The bindings do not support all features of z3. For example, you cannot (yet) create array expressions in the same way\nthat you can create arithmetic expressions. The JavaScript bindings have the distinct advantage that they let you use\nz3 directly in your browser with minimal extra dependencies."})}),"\n",(0,s.jsx)(n.h2,{id:"warmup",children:"Warmup"}),"\n",(0,s.jsx)(n.p,{children:"We use a collection of basic examples to illustrate the bindings.\nThe first example is a formula that establishes that there is no number both above 9 and below 10:"}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const x = Z3.Int.const(\'x\');\\nZ3.solve(Z3.And(x.ge(10), x.le(9)));","result":{"output":"unsat","error":"","status":"z3-ran","hash":"53ac78757a6b3f07aeb4850ac77c018a5dffdc92"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsxs)(n.p,{children:["We note that the JavaScript bindings wrap z3 expressions into JavaScript options that support methods for building new expressions.\nFor example, the method ",(0,s.jsx)(n.code,{children:"ge"})," is available on an arithmetic expression ",(0,s.jsx)(n.code,{children:"a"}),". It takes one argument ",(0,s.jsx)(n.code,{children:"b"})," and returns\nand expression corresponding to the predicate ",(0,s.jsx)(n.code,{children:"a >= b"}),".\nThe ",(0,s.jsx)(n.code,{children:"Z3.solve"})," method takes a sequence of predicates and checks if there is a solution. If there is a solution, it returns a model."]}),"\n",(0,s.jsx)(n.h2,{id:"propositional-logic",children:"Propositional Logic"}),"\n",(0,s.jsx)(n.p,{children:"Prove De Morgan's Law"}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const [x, y] = [Z3.Bool.const(\'x\'), Z3.Bool.const(\'y\')];\\nconst conjecture = Z3.Eq(Z3.Not(Z3.And(x, y)), Z3.Or(Z3.Not(x), Z3.Not(y)));\\nZ3.solve(Z3.Not(conjecture))","result":{"output":"unsat","error":"","status":"z3-ran","hash":"d73d10dd68f7f70d7793797dfd2c8bc81e152aee"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.p,{children:"What not to wear? It is well-known that developers of SAT solvers have difficulties looking sharp.\nThey like to wear some combination of shirt and tie, but can't wear both. What should a SAT solver developer wear?"}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const [tie, shirt] = [Z3.Bool.const(\'tie\'), Z3.Bool.const(\'shirt\')];\\nZ3.solve(Z3.Or(tie, shirt), Z3.Implies(tie, shirt), Z3.Or(Z3.Not(tie), Z3.Not(shirt)))","result":{"output":"(define-fun tie () Bool\\n  false)\\n(define-fun shirt () Bool\\n  true)","error":"","status":"z3-ran","hash":"4aebf58cb0a7d6a5ba1e61e9bc5c302617864bbd"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h2,{id:"integer-arithmetic",children:"Integer Arithmetic"}),"\n",(0,s.jsxs)(n.p,{children:["solve ",(0,s.jsx)(n.code,{children:"x > 2 and y < 10 and x + 2y = 7"})]}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const x = Z3.Int.const(\'x\');\\nconst y = Z3.Int.const(\'y\');\\nZ3.solve(x.gt(2), y.lt(10), x.add(y.mul(2)).eq(7))","result":{"output":"(define-fun y () Int\\n  0)\\n(define-fun x () Int\\n  7)","error":"","status":"z3-ran","hash":"16bf661bb2a239512abff5d2d595d8bac9320dca"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h3,{id:"dogs-cats-and-mice",children:"Dogs, cats and mice"}),"\n",(0,s.jsx)(n.p,{children:"Given 100 dollars, the puzzle asks if it is possible to buy 100 animals\nbased on their prices that are 15, 1, and 0.25 dollars, respectively."}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"\\n// Create 3 integer variables\\n\\nconst dog = Z3.Int.const(\'dog\')\\nconst cat = Z3.Int.const(\'cat\')\\nconst mouse = Z3.Int.const(\'mouse\')\\n\\nZ3.solve(\\n// there is at least one dog, one cat, and one mouse\\n   dog.ge(1), cat.ge(1), mouse.ge(1),\\n   \\n// we want to buy 100 animals\\n   dog.add(cat.add(mouse)).eq(100),\\n   \\n// We have 100 dollars (10000 cents):\\n// dogs cost 15 dollars (1500 cents),\\n// cats cost 1 dollar (100 cents), and\\n// mice cost 25 cents\\n(dog.mul(1500)).add(cat.mul(100)).add(mouse.mul(25)).eq(10000));\\n","result":{"output":"(define-fun mouse () Int\\n  56)\\n(define-fun cat () Int\\n  41)\\n(define-fun dog () Int\\n  3)","error":"","status":"z3-ran","hash":"55a6aa52577d1ae2815c33843c654f570c3b8e69"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h2,{id:"arrays",children:"Arrays"}),"\n",(0,s.jsxs)(n.p,{children:["Arrays use the methods ",(0,s.jsx)(n.code,{children:"select"})," and ",(0,s.jsx)(n.code,{children:"store"})," to access and update elements. Note that\narrays are static and these operations return new arrays."]}),"\n",(0,s.jsxs)(n.h3,{id:"prove-storearr-idx-validx--val",children:["Prove ",(0,s.jsx)(n.code,{children:"Store(arr, idx, val)[idx] == val"})]}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const arr = Z3.Array.const(\'arr\', Z3.Int.sort(), Z3.Int.sort());\\nconst [idx, val] = Z3.Int.consts(\'idx val\');\\nconst conjecture = arr.store(idx, val).select(idx).eq(val);\\nZ3.solve(Z3.Not(conjecture));","result":{"output":"unsat","error":"","status":"z3-ran","hash":"e32da8b2ef0290536a3571b7988c1d03caed2964"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h3,{id:"find-unequal-arrays-with-the-same-sum",children:"Find unequal arrays with the same sum"}),"\n",(0,s.jsx)(n.p,{children:"We illustrate how to use the solver in finding assignments of array values that\nsatisfy a given predicate. In this example, we want to find two arrays of length 4\nthat have the same sum, but are not equal:"}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const { Array, BitVec } = Z3;\\nconst mod = 1n << 32n;\\nconst arr1 = Array.const(\'arr\', BitVec.sort(2), BitVec.sort(32));\\nconst arr2 = Array.const(\'arr2\', BitVec.sort(2), BitVec.sort(32));\\nconst same_sum = arr1.select(0)\\n    .add(arr1.select(1))\\n    .add(arr1.select(2))\\n    .add(arr1.select(3))\\n    .eq(\\n      arr2.select(0)\\n        .add(arr2.select(1))\\n        .add(arr2.select(2))\\n        .add(arr2.select(3))\\n    );\\nconst different = arr1.select(0).neq(arr2.select(0))\\n    .or(arr1.select(1).neq(arr2.select(1)))\\n    .or(arr1.select(2).neq(arr2.select(2)))\\n    .or(arr1.select(3).neq(arr2.select(3)));\\n    \\nconst model = await Z3.solve(same_sum.and(different)) as Model;\\nconst arr1Vals = [0, 1, 2, 3].map(i => model.eval(arr1.select(i)).value());\\nconst arr2Vals = [0, 1, 2, 3].map(i => model.eval(arr2.select(i)).value());\\n\\nvar buffer = \\"\\"\\nfor (let i = 0; i < 4; i++) {\\n    buffer += arr1Vals[i];\\n    buffer += \\" \\"\\n}\\nbuffer += \\"\\\\n\\";\\nfor (let i = 0; i < 4; i++) {\\n    buffer += arr2Vals[i];\\n    buffer += \\" \\"\\n}\\nbuffer += \\"\\\\n\\";\\nbuffer","result":{"output":"4294967295 1205575 4294705147 3 \\n0 4294967295 927249 16180 \\n","error":"","status":"z3-ran","hash":"b4373cf871abcd1e72599b9523e0fb790e1c6b0f"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h2,{id:"uninterpreted-functions",children:"Uninterpreted Functions"}),"\n",(0,s.jsxs)(n.p,{children:["The method ",(0,s.jsx)(n.code,{children:"call"})," is used to build expressions by applying the function node to arguments."]}),"\n",(0,s.jsxs)(n.h3,{id:"prove-x--y-implies-gx--gy",children:["Prove ",(0,s.jsx)(n.code,{children:"x = y implies g(x) = g(y)"})]}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const sort = Z3.Int.sort();\\nconst x = Z3.Int.const(\'x\');\\nconst y = Z3.Int.const(\'y\');\\nconst g = Z3.Function.declare(\'g\', sort, sort);\\nconst conjecture = Z3.Implies(x.eq(y), g.call(x).eq(g.call(y)));\\nZ3.solve(Z3.Not(conjecture));","result":{"output":"unsat","error":"","status":"z3-ran","hash":"1eaf8de62de65c19c2fd2f244be943c94075ec85"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsxs)(n.h3,{id:"disprove-x--y-implies-ggx--gy",children:["Disprove ",(0,s.jsx)(n.code,{children:"x = y implies g(g(x)) = g(y)"})]}),"\n",(0,s.jsxs)(n.p,{children:["we illustrate the use of the ",(0,s.jsx)(n.code,{children:"Solver"})," object in the following example. Instead of calling ",(0,s.jsx)(n.code,{children:"Z3.solve"}),"\nwe here create a solver object and add assertions to it. The ",(0,s.jsx)(n.code,{children:"solver.check()"})," method is used to check\nsatisfiability (we expect the result to be ",(0,s.jsx)(n.code,{children:"sat"})," for this example). The method ",(0,s.jsx)(n.code,{children:"solver.model()"})," is used to retrieve a model:"]}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const solver = new Z3.Solver();\\nconst sort = Z3.Int.sort();\\nconst x = Z3.Int.const(\'x\');\\nconst y = Z3.Int.const(\'y\');\\nconst g = Z3.Function.declare(\'g\', sort, sort);\\nconst conjecture = Z3.Implies(x.eq(y), g.call(g.call(x)).eq(g.call(y)));\\nsolver.add(Z3.Not(conjecture));\\nawait solver.check()\\nsolver.model()","result":{"output":"(define-fun y () Int\\n  0)\\n(define-fun x () Int\\n  0)\\n(define-fun g ((x!0 Int)) Int\\n  (ite (= x!0 1) 2\\n    1))","error":"","status":"z3-ran","hash":"8b21d0f4fc59fb68961ef85b0b722d7fc927279e"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsxs)(n.h3,{id:"prove-x--y-implies-gx--gy-1",children:["Prove ",(0,s.jsx)(n.code,{children:"x = y implies g(x) = g(y)"})]}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const sort = Z3.Int.sort();\\nconst x = Z3.Int.const(\'x\');\\nconst y = Z3.Int.const(\'y\');\\nconst g = Z3.Function.declare(\'g\', sort, sort);\\nconst conjecture = Z3.Implies(x.eq(y), g.call(x).eq(g.call(y)));\\nZ3.solve(Z3.Not(conjecture));","result":{"output":"unsat","error":"","status":"z3-ran","hash":"1eaf8de62de65c19c2fd2f244be943c94075ec85"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsxs)(n.h3,{id:"disprove-that-x--y-implies-ggx--gy",children:["Disprove that ",(0,s.jsx)(n.code,{children:"x = y implies g(g(x)) = g(y)"})]}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const sort = Z3.Int.sort();\\nconst x = Z3.Int.const(\'x\');\\nconst y = Z3.Int.const(\'y\');\\nconst g = Z3.Function.declare(\'g\', sort, sort);\\nconst conjecture = Z3.Implies(x.eq(y), g.call(g.call(x)).eq(g.call(y)));\\nZ3.solve(Z3.Not(conjecture));","result":{"output":"(define-fun y () Int\\n  0)\\n(define-fun x () Int\\n  0)\\n(define-fun g ((x!0 Int)) Int\\n  (ite (= x!0 1) 2\\n    1))","error":"","status":"z3-ran","hash":"90f6e9d6472977159f7c059e80d0163fe3b353c5"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h2,{id:"solve-sudoku",children:"Solve sudoku"}),"\n",(0,s.jsx)(n.p,{children:"The popular Sudoku can be solved."}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"function toSudoku(data: string): (number | null)[][] {\\n    const cells: (number | null)[][] = Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => null));\\n\\n    const lines = data.trim().split(\'\\\\n\');\\n    for (let row = 0; row < 9; row++) {\\n        const line = lines[row].trim();\\n        for (let col = 0; col < 9; col++) {\\n            const char = line[col];\\n            if (char !== \'.\') {\\n                cells[row][col] = Number.parseInt(char);\\n            }\\n        }\\n    }\\n    return cells;\\n}\\n\\nconst INSTANCE = toSudoku(`\\n....94.3.\\n...51...7\\n.89....4.\\n......2.8\\n.6.2.1.5.\\n1.2......\\n.7....52.\\n9...65...\\n.4.97....\\n`);\\n\\n\\nconst cells = [];\\n// 9x9 matrix of integer variables\\nfor (let i = 0; i < 9; i++) {\\n    const row = [];\\n    for (let j = 0; j < 9; j++) {\\n        row.push(Z3.Int.const(`x_${i}_${j}`));\\n    }\\n    cells.push(row);\\n}\\n\\nconst solver = new Z3.Solver();\\n\\n// each cell contains a value 1<=x<=9\\nfor (let i = 0; i < 9; i++) {\\n    for (let j = 0; j < 9; j++) {\\n        solver.add(cells[i][j].ge(1), cells[i][j].le(9));\\n    }\\n}\\n\\n// each row contains a digit only once\\nfor (let i = 0; i < 9; i++) {\\n    solver.add(Z3.Distinct(...cells[i]));\\n}\\n\\n// each column contains a digit only once\\nfor (let j = 0; j < 9; j++) {\\n    const column = [];\\n    for (let i = 0; i < 9; i++) {\\n        column.push(cells[i][j]);\\n    }\\n    solver.add(Z3.Distinct(...column));\\n}\\n\\n// each 3x3 contains a digit at most once\\nfor (let iSquare = 0; iSquare < 3; iSquare++) {\\n    for (let jSquare = 0; jSquare < 3; jSquare++) {\\n        const square = [];\\n\\n        for (let i = iSquare * 3; i < iSquare * 3 + 3; i++) {\\n            for (let j = jSquare * 3; j < jSquare * 3 + 3; j++) {\\n                square.push(cells[i][j]);\\n            }\\n        }\\n\\n        solver.add(Z3.Distinct(...square));\\n    }\\n}\\n\\nfor (let i = 0; i < 9; i++) {\\n    for (let j = 0; j < 9; j++) {\\n        const digit = INSTANCE[i][j];\\n        if (digit !== null) {\\n            solver.add(cells[i][j].eq(digit));\\n        }\\n    }\\n}\\n\\nconst is_sat = await solver.check(); // sat\\nconst model = solver.model() as Model;\\nvar buffer = \\"\\";\\n\\nfor (let i = 0; i < 9; i++) {\\n    for (let j = 0; j < 9; j++) {\\n        const v = model.eval(cells[i][j]);\\n        buffer += `${v}`;\\n    }\\n    buffer += \\"\\\\n\\";\\n}\\nbuffer","result":{"output":"715894632\\n234516897\\n689723145\\n493657218\\n867231954\\n152489763\\n376148529\\n928365471\\n541972386\\n","error":"","status":"z3-ran","hash":"f2457db1aacb76f337bd581f8c0a47228d35cc6e"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.p,{children:"The encoding used in the following example uses arithmetic.\nIt works here, but is not the only possible encoding approach.\nYou can also use bit-vectors for the cells. It is generally better\nto use bit-vectors for finite domain problems in z3."}),"\n",(0,s.jsx)(n.h2,{id:"arithmetic-over-reals",children:"Arithmetic over Reals"}),"\n",(0,s.jsx)(n.p,{children:"You can create constants ranging over reals from strings that use fractions, decimal notation and from floating point numbers."}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const n1 = Z3.Real.val(\'1/2\');\\nconst n2 = Z3.Real.val(\'0.5\');\\nconst n3 = Z3.Real.val(0.5);\\n\\nconst conjecture = Z3.And(n1.eq(n2), n1.eq(n3));\\nZ3.solve(Z3.Not(conjecture));","result":{"output":"unsat","error":"","status":"z3-ran","hash":"1976b05f722ddd1c92d8caf550c37e790e3a9229"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.p,{children:"Z3 uses arbitrary precision arithmetic, so decimal positions are not truncated when you use strings to represent real numerals."}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const n4 = Z3.Real.val(\'-1/3\');\\nconst n5 = Z3.Real.val(\'-0.3333333333333333333333333333333333\');\\n\\nZ3.solve(n4.eq(n5));","result":{"output":"unsat","error":"","status":"z3-ran","hash":"32a52808667582c0aa0a879baad40267d438d0af"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h2,{id:"non-linear-arithmetic",children:"Non-linear arithmetic"}),"\n",(0,s.jsxs)(n.p,{children:["Z3 uses a decision procedure for non-linear arithmetic over reals.\nIt is based on Cylindric Algebraic Decomposition. Solutions to non-linear\narithmetic formulas are no longer necessarily rational. They are represented\nas ",(0,s.jsx)(n.em,{children:"algebraic numbers"})," in general and can be displayed with any number of\ndecimal position precision."]}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"setParam(\'pp.decimal\', true);\\nsetParam(\'pp.decimal_precision\', 80);\\n\\nconst x = Z3.Real.const(\'x\');\\nconst y = Z3.Real.const(\'y\');\\nconst z = Z3.Real.const(\'z\');\\n\\nconst solver = new Z3.Solver();\\nsolver.add(x.mul(x).add(y.mul(y)).eq(1)); // x^2 + y^2 == 1\\nsolver.add(x.mul(x).mul(x).add(z.mul(z).mul(z)).lt(\'1/2\')); // x^3 + z^3 < 1/2\\n\\nawait solver.check(); // sat\\nsolver.model()","result":{"output":"(define-fun y () Real\\n  (- 1.0))\\n(define-fun x () Real\\n  0.0)\\n(define-fun z () Real\\n  0.0)","error":"","status":"z3-ran","hash":"65008d015a47410b90cf83dc166e7c24e15d8529"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h2,{id:"bit-vectors",children:"Bit-vectors"}),"\n",(0,s.jsx)(n.p,{children:"Unlike in programming languages, there is no distinction between\nsigned and unsigned bit-vectors. Instead the API supports operations\nthat have different meaning depending on whether a bit-vector is treated\nas a signed or unsigned numeral. These are signed comparison and signed division, remainder operations."}),"\n",(0,s.jsx)(n.p,{children:"In the following we illustrate the use of signed and unsigned less-than-or-equal:"}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const x = Z3.BitVec.const(\'x\', 32);\\n\\nconst sConj = x.sub(10).sle(0).eq(x.sle(10));\\nconst sSolver = new Z3.Solver();\\nsSolver.add(sConj);\\nawait sSolver.check(); // sat\\n\\nconst sModel = sSolver.model();\\n\\n\\nconst uConj = x.sub(10).ule(0).eq(x.ule(10));\\nconst uSolver = new Z3.Solver();\\nuSolver.add(uConj);\\nawait uSolver.check(); // sat\\n\\nconst uModel = uSolver.model();\\n[uModel.get(x), sModel.get(x)] // unsigned, signed","result":{"output":"#x0000000a,#x0000001b","error":"","status":"z3-ran","hash":"d83af025bc372b3776aca4210e0bd88554d998f7"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.p,{children:"It is easy to write formulas that mix bit-wise and arithmetic operations over bit-vectors."}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const x = Z3.BitVec.const(\'x\', 32);\\nconst y = Z3.BitVec.const(\'y\', 32);\\n\\nconst solver = new Z3.Solver();\\nconst conjecture = x.xor(y).sub(103).eq(x.mul(y));\\nsolver.add(conjecture);\\nconst is_sat = await solver.check(); // sat\\n\\nconst model = solver.model();\\n\\n// need the following cast for `asSignedValue` to work\\nconst xSol = model.get(x) as BitVecNum;\\nconst ySol = model.get(y) as BitVecNum;\\n\\n\\nconst are_vals = Z3.isBitVecVal(xSol) && Z3.isBitVecVal(ySol); // true\\n\\nconst xv = xSol.asSignedValue();\\nconst yv = ySol.asSignedValue();\\n\\n// this solutions wraps around so we need to check using modulo\\nconst is_eq = (xv ^ yv) - 103n === (xv * yv) % 2n ** 32n; // true\\n\\n` is-sat: ${is_sat} solutions are values: ${are_vals} satisfy equality: ${is_eq}`","result":{"output":" is-sat: sat solutions are values: true satisfy equality: true","error":"","status":"z3-ran","hash":"c55af978c80384cf3d8697792d384b273576c23d"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,s.jsx)(n.h2,{id:"using-z3-objects-wrapped-in-javascript",children:"Using Z3 objects wrapped in JavaScript"}),"\n",(0,s.jsx)(n.p,{children:"The following example illustrates the use of AstVector:"}),"\n",(0,s.jsx)(i.A,{input:'{"lang":"z3-js","highlight":"typescript","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"const solver = new Z3.Solver();\\n\\nconst vector = new Z3.AstVector<Arith>();\\nfor (let i = 0; i < 5; i++) {\\n    vector.push(Z3.Int.const(`int__${i}`));\\n}\\n\\nconst length = vector.length();\\nfor (let i = 0; i < length; i++) {\\n    solver.add((vector.get(i) as Arith).gt(1));\\n}\\nsolver.add(Z3.Distinct(...vector));\\nawait solver.check();\\nsolver.model()","result":{"output":"(define-fun int__2 () Int\\n  4)\\n(define-fun int__3 () Int\\n  5)\\n(define-fun int__0 () Int\\n  2)\\n(define-fun int__1 () Int\\n  3)\\n(define-fun int__4 () Int\\n  6)","error":"","status":"z3-ran","hash":"ee642f89b299189d01fc82e76cc2481d62887765"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);