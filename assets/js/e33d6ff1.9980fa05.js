"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9613],{5015:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"strategies/goals","title":"Goals","description":"Z3 implements a methodology for orchestrating reasoning engines where \\"big\\" symbolic reasoning steps are represented as functions known as tactics, and tactics are composed using combinators known as tacticals. Tactics process sets of formulas called Goals.","source":"@site/docs-smtlib/03 - strategies/02 - goals.md","sourceDirName":"03 - strategies","slug":"/strategies/goals","permalink":"/z3guide/docs/strategies/goals","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/z3guide/tree/main/website/docs-smtlib/03 - strategies/02 - goals.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Goals","sidebar_position":2},"sidebar":"smtlibSidebar","previous":{"title":"Introduction","permalink":"/z3guide/docs/strategies/intro"},"next":{"title":"Tactics","permalink":"/z3guide/docs/strategies/tactics"}}');var o=t(4848),i=t(8453),a=t(6851);const r={title:"Goals",sidebar_position:2},l=void 0,c={},d=[];function u(e){const s={code:"code",em:"em",p:"p",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.p,{children:['Z3 implements a methodology for orchestrating reasoning engines where "big" symbolic reasoning steps are represented as functions known as ',(0,o.jsx)(s.em,{children:"tactics"}),", and tactics are composed using combinators known as ",(0,o.jsx)(s.em,{children:"tacticals"}),". Tactics process sets of formulas called Goals."]}),"\n",(0,o.jsx)(s.p,{children:"When a tactic is applied to some goal G, four different outcomes are possible. In SMT 2.0, the goal is the conjunction of all assertions. The tactic succeeds in showing G to be satisfiable (i.e., feasible); succeeds in showing G to be unsatisfiable (i.e., infeasible); produces a sequence of subgoals; or fails. When reducing a goal G to a sequence of subgoals G1, ..., Gn, we face the problem of model conversion. A model converter constructs a model for G using a model for some subgoal Gi."}),"\n",(0,o.jsxs)(s.p,{children:["In the following example, we use the command ",(0,o.jsx)(s.code,{children:"apply"})," to execute a tactic composed of two built-in tactics: ",(0,o.jsx)(s.code,{children:"simplify"})," and ",(0,o.jsx)(s.code,{children:"solve-eqs"}),". The tactic ",(0,o.jsx)(s.code,{children:"simplify"})," applies transformations equivalent to the ones found in the ",(0,o.jsx)(s.code,{children:"simplify"})," command.\nThe tactic ",(0,o.jsx)(s.code,{children:"solve-eqs"})," eliminates variables using Gaussian elimination.\nActually, ",(0,o.jsx)(s.code,{children:"solve-eqs"})," is not restricted linear arithmetic, but can also eliminate arbitrary variables. The combinator ",(0,o.jsx)(s.code,{children:"then"})," applies ",(0,o.jsx)(s.code,{children:"simplify"})," to the input goal and ",(0,o.jsx)(s.code,{children:"solve-eqs"})," to each subgoal produced by ",(0,o.jsx)(s.code,{children:"simplify"}),". In this example, only one subgoal is produced."]}),"\n",(0,o.jsx)(a.A,{input:'{"lang":"z3","highlight":"clojure","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"(declare-const x Real)\\n(declare-const y Real)\\n\\n(assert (> x 0.0))\\n(assert (> y 0.0))\\n(assert (= x (+ y 2.0)))\\n\\n(apply (then simplify solve-eqs))","result":{"output":"(goals\\n(goal\\n  (not (<= x 0.0))\\n  (not (<= x 2.0))\\n  :precision precise :depth 2)\\n)\\n","error":"","status":"z3-ran","hash":"5aa11d86ad5f2814016a1e4d60ac68374fd709c8"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'}),"\n",(0,o.jsx)(s.p,{children:"In the example above, variable x is eliminated, and is not present in the resultant goal."}),"\n",(0,o.jsxs)(s.p,{children:["In Z3, a ",(0,o.jsx)(s.em,{children:"clause"})," is any constraint of the form ",(0,o.jsx)(s.code,{children:"(or f_1 ... f_n)"}),".\nThe tactic ",(0,o.jsx)(s.code,{children:"split-clause"})," will select a clause ",(0,o.jsx)(s.code,{children:"(or f_1 ... f_n)"})," in the input goal, and split it into n subgoals, one for each subformula ",(0,o.jsx)(s.code,{children:"f_i"}),"."]}),"\n",(0,o.jsx)(a.A,{input:'{"lang":"z3","highlight":"clojure","statusCodes":{"success":"z3-ran","timeout":"z3-timed-out","runError":"z3-failed","runtimeError":"z3-runtime-error"},"code":"(declare-const x Real)\\n(declare-const y Real)\\n\\n(assert (or (< x 0.0) (> x 0.0)))\\n(assert (= x (+ y 1.0)))\\n(assert (< y 0.0))\\n\\n(apply split-clause)","result":{"output":"(goals\\n(goal\\n  (< x 0.0)\\n  (= x (+ y 1.0))\\n  (< y 0.0)\\n  :precision precise :depth 1)\\n(goal\\n  (> x 0.0)\\n  (= x (+ y 1.0))\\n  (< y 0.0)\\n  :precision precise :depth 1)\\n)\\n","error":"","status":"z3-ran","hash":"a31e09cc6a94de7440da4778539ef967154028fb"},"githubRepo":"Z3Prover/z3","editable":false,"readonly":false,"showLineNumbers":true,"langVersion":"4.15.1","tool":"z3-solver"}'})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);