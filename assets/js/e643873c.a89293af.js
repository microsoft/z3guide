"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9424],{6410:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Z3 Python - Readonly/Strategies","title":"Strategies","description":"High-performance solvers, such as Z3, contain many tightly integrated, handcrafted heuristic","source":"@site/docs-programming/02 - Z3 Python - Readonly/03 - Strategies.md","sourceDirName":"02 - Z3 Python - Readonly","slug":"/Z3 Python - Readonly/Strategies","permalink":"/z3guide/programming/Z3 Python - Readonly/Strategies","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/z3guide/tree/main/website/docs-programming/02 - Z3 Python - Readonly/03 - Strategies.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Strategies","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Topics","permalink":"/z3guide/programming/Z3 Python - Readonly/advanced"},"next":{"title":"Fixedpoints","permalink":"/z3guide/programming/Z3 Python - Readonly/Fixedpoints"}}');var i=s(4848),o=s(8453),r=s(6851);const l={title:"Strategies",sidebar_position:3},a="Strategies",c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Tactics",id:"tactics",level:2},{value:"Combining tactics with solvers",id:"combining-tactics-with-solvers",level:3},{value:"Using tactics to simplify benchmarks",id:"using-tactics-to-simplify-benchmarks",level:3},{value:"Probes",id:"probes",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"strategies",children:"Strategies"})}),"\n",(0,i.jsx)(n.p,{children:"High-performance solvers, such as Z3, contain many tightly integrated, handcrafted heuristic\ncombinations of algorithmic proof methods. While these heuristic\ncombinations tend to be highly tuned for known classes of problems,\nthey may easily perform very badly on new classes of problems.\nThis issue is becoming increasingly pressing\nas solvers begin to gain the attention of practitioners in diverse areas of science and engineering.\nIn many cases, changes to the solver heuristics can make a\ntremendous difference."}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial we show how to create custom strategies using the basic building blocks\navailable in Z3. Z3Py and Z3 implement the ideas proposed in this ",(0,i.jsx)("a",{target:"_blank",href:"http://research.microsoft.com/en-us/um/people/leonardo/strategy.pdf",children:"article"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:['Z3 implements  a methodology for orchestrating reasoning\nengines where "big" symbolic reasoning steps are represented as\nfunctions known as ',(0,i.jsx)(n.strong,{children:"tactics"}),", and tactics are composed using\ncombinators known as ",(0,i.jsx)(n.strong,{children:"tacticals"}),". Tactics process sets of\nformulas called ",(0,i.jsx)(n.strong,{children:"Goals"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When a tactic is applied to some goal ",(0,i.jsx)(n.code,{children:"G"}),", four different outcomes\nare possible. The tactic succeeds in showing ",(0,i.jsx)(n.code,{children:"G"})," to be satisfiable (i.e., feasible);\nsucceeds in showing ",(0,i.jsx)(n.code,{children:"G"})," to be unsatisfiable (i.e., infeasible); produces a sequence of subgoals; or fails.\nWhen reducing a goal ",(0,i.jsx)(n.code,{children:"G"})," to a sequence of subgoals ",(0,i.jsx)(n.code,{children:"G1"}),", ...,\n",(0,i.jsx)(n.code,{children:"Gn"}),", we face the problem of model conversion.\nA ",(0,i.jsx)(n.strong,{children:"model converter"})," construct a model for ",(0,i.jsx)(n.code,{children:"G"}),"\nusing a model for some subgoal ",(0,i.jsx)(n.code,{children:"Gi"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In the following example, we create a goal ",(0,i.jsx)(n.code,{children:"g"})," consisting of three formulas, and a tactic ",(0,i.jsx)(n.code,{children:"t"}),"\ncomposed of two built-in tactics: ",(0,i.jsx)(n.code,{children:"simplify"})," and ",(0,i.jsx)(n.code,{children:"solve-eqs"}),". The tactic ",(0,i.jsx)(n.code,{children:"simplify"}),"\napply transformations equivalent to the ones found in the command ",(0,i.jsx)(n.code,{children:"simplify"}),". The tactic ",(0,i.jsx)(n.code,{children:"solver-eqs"}),"\neliminate variables using Gaussian elimination. Actually, ",(0,i.jsx)(n.code,{children:"solve-eqs"})," is not restricted only to linear arithmetic.\nIt can also eliminate arbitrary variables. Then, combinator ",(0,i.jsx)(n.code,{children:"Then"})," applies ",(0,i.jsx)(n.code,{children:"simplify"})," to the input goal\nand ",(0,i.jsx)(n.code,{children:"solve-eqs"})," to each subgoal produced by ",(0,i.jsx)(n.code,{children:"simplify"}),". In this example, only one subgoal is produced."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"x, y = Reals(\'x y\')\\ng  = Goal()\\ng.add(x > 0, y > 0, x == y + 2)\\nprint (g)\\n\\nt1 = Tactic(\'simplify\')\\nt2 = Tactic(\'solve-eqs\')\\nt  = Then(t1, t2)\\nprint (t(g))","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, variable ",(0,i.jsx)(n.code,{children:"x"})," is eliminated, and is not present the resultant goal."]}),"\n",(0,i.jsxs)(n.p,{children:["In Z3, we say a ",(0,i.jsx)(n.strong,{children:"clause"})," is any constraint of the form ",(0,i.jsx)(n.code,{children:"Or(f_1, ..., f_n)"}),".\nThe tactic ",(0,i.jsx)(n.code,{children:"split-clause"})," will select a clause ",(0,i.jsx)(n.code,{children:"Or(f_1, ..., f_n)"})," in the input goal, and split it\n",(0,i.jsx)(n.code,{children:"n"})," subgoals. One for each subformula ",(0,i.jsx)(n.code,{children:"f_i"}),"."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"x, y = Reals(\'x y\')\\ng  = Goal()\\ng.add(Or(x < 0, x > 0), x == y + 1, y < 0)\\n\\nt = Tactic(\'split-clause\')\\nr = t(g)\\nfor g in r: \\n    print(g)","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsx)(n.h2,{id:"tactics",children:"Tactics"}),"\n",(0,i.jsxs)(n.p,{children:["Z3 comes equipped with many built-in tactics.\nThe command ",(0,i.jsx)(n.code,{children:"describe_tactics()"})," provides a short description of all built-in tactics."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"describe_tactics()","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsx)(n.p,{children:"Z3Py comes equipped with the following tactic combinators (aka tacticals):"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Then(t, s)"})}),(0,i.jsxs)(n.td,{children:["applies ",(0,i.jsx)(n.code,{children:"t"})," to the input goal and ",(0,i.jsx)(n.code,{children:"s"})," to every subgoal produced by ",(0,i.jsx)(n.code,{children:"t"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"OrElse(t, s)"})}),(0,i.jsxs)(n.td,{children:["first applies ",(0,i.jsx)(n.code,{children:"t"})," to the given goal, if it fails then returns the result of ",(0,i.jsx)(n.code,{children:"s"})," applied to the given  goal."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Repeat(t)"})}),(0,i.jsx)(n.td,{children:"Keep applying the given tactic until no subgoal is modified by it."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Repeat(t, n)"})}),(0,i.jsxs)(n.td,{children:["Keep applying the given tactic until no subgoal is modified by it, or the number of iterations is greater than ",(0,i.jsx)(n.code,{children:"n"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TryFor(t, ms)"})}),(0,i.jsxs)(n.td,{children:["Apply tactic ",(0,i.jsx)(n.code,{children:"t"})," to the input goal, if it does not return in ",(0,i.jsx)(n.code,{children:"ms"})," millisenconds, it fails."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"With(t, params)"})}),(0,i.jsx)(n.td,{children:"Apply the given tactic using the given parameters."})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrate how to use these combinators."}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"x, y, z = Reals(\'x y z\')\\ng = Goal()\\ng.add(Or(x == 0, x == 1), \\n      Or(y == 0, y == 1), \\n      Or(z == 0, z == 1),\\n      x + y + z > 2)\\n\\n# Split all clauses\\"\\nsplit_all = Repeat(OrElse(Tactic(\'split-clause\'),\\n                          Tactic(\'skip\')))\\nprint (split_all(g))\\n\\nsplit_at_most_2 = Repeat(OrElse(Tactic(\'split-clause\'),\\n                          Tactic(\'skip\')),\\n                         1)\\nprint (split_at_most_2(g))\\n\\n# Split all clauses and solve equations\\nsplit_solve = Then(Repeat(OrElse(Tactic(\'split-clause\'),\\n                                 Tactic(\'skip\'))),\\n                   Tactic(\'solve-eqs\'))\\n\\nprint (split_solve(g))","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsxs)(n.p,{children:["In the tactic ",(0,i.jsx)(n.code,{children:"split_solver"}),", the tactic ",(0,i.jsx)(n.code,{children:"solve-eqs"})," discharges all but one goal.\nNote that, this tactic generates one goal: the empty goal which is trivially satisfiable (i.e., feasible)"]}),"\n",(0,i.jsxs)(n.p,{children:["The list of subgoals can be easily traversed using the Python ",(0,i.jsx)(n.code,{children:"for"})," statement."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"x, y, z = Reals(\'x y z\')\\ng = Goal()\\ng.add(Or(x == 0, x == 1), \\n      Or(y == 0, y == 1), \\n      Or(z == 0, z == 1),\\n      x + y + z > 2)\\n\\n# Split all clauses\\"\\nsplit_all = Repeat(OrElse(Tactic(\'split-clause\'),\\n                          Tactic(\'skip\')))\\nfor s in split_all(g):\\n    print (s)","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsxs)(n.p,{children:["A tactic can be converted into a solver object using the method ",(0,i.jsx)(n.code,{children:"solver()"}),".\nIf the tactic produces the empty goal, then the associated solver returns ",(0,i.jsx)(n.code,{children:"sat"}),".\nIf the tactic produces a single goal containing ",(0,i.jsx)(n.code,{children:"False"}),", then the solver returns ",(0,i.jsx)(n.code,{children:"unsat"}),".\nOtherwise, it returns ",(0,i.jsx)(n.code,{children:"unknown"}),"."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"bv_solver = Then(\'simplify\', \\n                 \'solve-eqs\', \\n                 \'bit-blast\', \\n                 \'sat\').solver()\\n\\nx, y = BitVecs(\'x y\', 16)\\nsolve_using(bv_solver, x | y == 13, x > y)","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, the tactic ",(0,i.jsx)(n.code,{children:"bv_solver"})," implements a basic bit-vector solver using equation solving,\nbit-blasting, and a propositional SAT solver. Note that, the command ",(0,i.jsx)(n.code,{children:"Tactic"})," is suppressed.\nAll Z3Py combinators automatically invoke ",(0,i.jsx)(n.code,{children:"Tactic"})," command if the argument is a string.\nFinally, the command ",(0,i.jsx)(n.code,{children:"solve_using"})," is a variant of the ",(0,i.jsx)(n.code,{children:"solve"})," command where the first\nargument specifies the solver to be used."]}),"\n",(0,i.jsxs)(n.p,{children:["In the following example, we use the solver API directly instead of the command ",(0,i.jsx)(n.code,{children:"solve_using"}),".\nWe use the combinator ",(0,i.jsx)(n.code,{children:"With"})," to configure our little solver. We also include the tactic ",(0,i.jsx)(n.code,{children:"aig"}),"\nwhich tries to compress Boolean formulas using And-Inverted Graphs."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"bv_solver = Then(With(\'simplify\', mul2concat=True),\\n                 \'solve-eqs\', \\n                 \'bit-blast\', \\n                 \'aig\',\\n                 \'sat\').solver()\\nx, y = BitVecs(\'x y\', 16)\\nbv_solver.add(x*32 + y == 13, x & y < 10, y > -100)\\nprint (bv_solver.check())\\nm = bv_solver.model()\\nprint (m)\\nprint (x*32 + y, \\"==\\", m.evaluate(x*32 + y))\\nprint (x & y, \\"==\\", m.evaluate(x & y))","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsxs)(n.p,{children:["The tactic ",(0,i.jsx)(n.code,{children:"smt"})," wraps the main solver in Z3 as a tactic."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"x, y = Ints(\'x y\')\\ns = Tactic(\'smt\').solver()\\ns.add(x > y + 1)\\nprint (s.check())\\nprint (s.model())","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsx)(n.p,{children:"Now, we show how to implement a solver for integer arithmetic using SAT. The solver is complete\nonly for problems where every variable has a lower and upper bound."}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"s = Then(With(\'simplify\', arith_lhs=True, som=True),\\n         \'normalize-bounds\', \'lia2pb\', \'pb2bv\', \\n         \'bit-blast\', \'sat\').solver()\\nx, y, z = Ints(\'x y z\')\\nsolve_using(s, \\n            x > 0, x < 10, \\n            y > 0, y < 10, \\n            z > 0, z < 10,\\n            3*y + 2*x == z)\\n# It fails on the next example (it is unbounded)\\ns.reset()\\nsolve_using(s, 3*y + 2*x == z)","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsx)(n.h3,{id:"combining-tactics-with-solvers",children:"Combining tactics with solvers"}),"\n",(0,i.jsx)(n.p,{children:"Tactics can be combined with solvers. For example, we can apply a tactic to a goal, produced a set of subgoals,\nthen select one of the subgoals and solve it using a solver. The next example demonstrates how to do that, and how to\nuse model converters to convert a model for a subgoal into a model for the original goal."}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"t = Then(\'simplify\', \\n         \'normalize-bounds\', \\n         \'solve-eqs\')\\n\\nx, y, z = Ints(\'x y z\')\\ng = Goal()\\ng.add(x > 10, y == x + 3, z > y)\\n\\nr = t(g)\\n# r contains only one subgoal\\nprint (r)\\n\\ns = Solver()\\ns.add(r[0])\\nprint (s.check())\\n# Model for the subgoal\\nprint (s.model())\\n# Model for the original goal\\nprint (r[0].convert_model(s.model()))","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsx)(n.h3,{id:"using-tactics-to-simplify-benchmarks",children:"Using tactics to simplify benchmarks"}),"\n",(0,i.jsx)(n.p,{children:"You can also use tactics to transform SMTLIB problems. Some simplifications eliminate variables so they\nwill not appear in the simplified formulas."}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"fml = \\"\\"\\"(declare-const x Int)\\n(declare-const y Int)\\n(assert (or (< (+ 3 x y) 1) (< x y)))\\n(assert (= x (+ y 1)))\\n\\"\\"\\"\\n\\ns = Solver()\\ns.from_string(fml)\\ng = Goal()\\ng.add(s.assertions())\\nt = Then(\'simplify\', \'solve-eqs\')\\nr = t(g)\\ns = Solver()\\ns.add(Or([g.as_expr() for g in r]))\\nprint(s.sexpr())","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsx)(n.h2,{id:"probes",children:"Probes"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Probes"})," (aka formula measures) are evaluated over goals.\nBoolean expressions over them can be built using relational operators and Boolean connectives.\nThe tactic ",(0,i.jsx)(n.code,{children:"FailIf(cond)"})," fails if the given goal does not satisfy the condition ",(0,i.jsx)(n.code,{children:"cond"}),".\nMany numeric and Boolean measures are available in Z3Py. The command ",(0,i.jsx)(n.code,{children:"describe_probes()"})," provides the list of\nall built-in probes."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"describe_probes()","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsxs)(n.p,{children:["In the following example, we build a simple tactic using ",(0,i.jsx)(n.code,{children:"FailIf"}),". It also shows that a probe can be applied directly\nto a goal."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"x, y, z = Reals(\'x y z\')\\ng = Goal()\\ng.add(x + y + z > 0)\\n\\np = Probe(\'num-consts\')\\nprint (\\"num-consts:\\", p(g))\\n\\nt = FailIf(p > 2)\\ntry:\\n    t(g)\\nexcept Z3Exception:\\n    print (\\"tactic failed\\")\\n\\nprint (\\"trying again...\\")\\ng = Goal()\\ng.add(x + y > 0)\\nprint (t(g))","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'}),"\n",(0,i.jsxs)(n.p,{children:["Z3Py also provides the combinator (tactical) ",(0,i.jsx)(n.code,{children:"If(p, t1, t2)"})," which is a shorthand for:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"OrElse(Then(FailIf(Not(p)), t1), t2)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The combinator ",(0,i.jsx)(n.code,{children:"When(p, t)"})," is a shorthand for:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"If(p, t, 'skip')\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The tactic ",(0,i.jsx)(n.code,{children:"skip"})," just returns the input goal.\nThe following example demonstrates how to use the ",(0,i.jsx)(n.code,{children:"If"})," combinator."]}),"\n",(0,i.jsx)(r.A,{input:'{"lang":"z3-python","highlight":"python","statusCodes":{},"code":"x, y, z = Reals(\'x y z\')\\ng = Goal()\\ng.add(x**2 - y**2 >= 0)\\n\\np = Probe(\'num-consts\')\\nt = If(p > 2, \'simplify\', \'factor\')\\n\\nprint (t(g))\\n\\ng = Goal()\\ng.add(x + x + y + z >= 0, x**2 - y**2 >= 0)\\n\\nprint (t(g))","result":{},"githubRepo":"Z3Prover/z3","editable":false,"readonly":true,"showLineNumbers":true}'})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);