"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2558],{5062:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"strategies/simplifiers","title":"Simplifiers","description":"A subset of tactics can be applied in incremental mode as pre-processing","source":"@site/docs-smtlib/03 - strategies/05 - simplifiers.md","sourceDirName":"03 - strategies","slug":"/strategies/simplifiers","permalink":"/z3guide/docs/strategies/simplifiers","draft":false,"unlisted":false,"editUrl":"https://github.com/microsoft/z3guide/tree/main/website/docs-smtlib/03 - strategies/05 - simplifiers.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Simplifiers","sidebar_position":5},"sidebar":"smtlibSidebar","previous":{"title":"Probes","permalink":"/z3guide/docs/strategies/probes"},"next":{"title":"Tactics Summary","permalink":"/z3guide/docs/strategies/summary"}}');var r=s(4848),n=s(8453);s(6851);const a={title:"Simplifiers",sidebar_position:5},o=void 0,c={},l=[];function p(e){const i={code:"code",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.p,{children:"A subset of tactics can be applied in incremental mode as pre-processing\nsimplification to solvers.\nThe SMTLIB interface provides a way to specialize solvers using a\nsequence of pre-processing simplification steps."}),"\n",(0,r.jsx)(i.p,{children:"You can list the set of available simplifiers with information about\ntheir parameters using the command."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"(help-simplifier)\n"})}),"\n",(0,r.jsxs)(i.p,{children:["To create a specialized solver use the command ",(0,r.jsx)(i.code,{children:"set-simplifier"}),"."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"(set-simplifier (then simplify solve-eqs elim-unconstrained propagate-values simplify qe-light simplify qe-light))\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Simplifiers are a special case of tactics. Not all tactics can be used as a simplifier.\nThe tactic language for composing simplifiers is also more rudimentary. The only operations are\nsequential composition and parameter adjustment.\nYou can sequence simplifiers using ",(0,r.jsx)(i.code,{children:"then"})," (or ",(0,r.jsx)(i.code,{children:"and-then"}),") similar to tactics. You can also set parameters on\nsimplifiers using the same syntax as for tactics."]})]})}function m(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);