{"input":"function toSudoku(data: string): (number | null)[][] {\n    const cells: (number | null)[][] = Array.from({ length: 9 }, () => Array.from({ length: 9 }, () => null));\n\n    const lines = data.trim().split('\\n');\n    for (let row = 0; row < 9; row++) {\n        const line = lines[row].trim();\n        for (let col = 0; col < 9; col++) {\n            const char = line[col];\n            if (char !== '.') {\n                cells[row][col] = Number.parseInt(char);\n            }\n        }\n    }\n    return cells;\n}\n\nconst INSTANCE = toSudoku(`\n....94.3.\n...51...7\n.89....4.\n......2.8\n.6.2.1.5.\n1.2......\n.7....52.\n9...65...\n.4.97....\n`);\n\n\nconst cells = [];\n// 9x9 matrix of integer variables\nfor (let i = 0; i < 9; i++) {\n    const row = [];\n    for (let j = 0; j < 9; j++) {\n        row.push(Z3.Int.const(`x_${i}_${j}`));\n    }\n    cells.push(row);\n}\n\nconst solver = new Z3.Solver();\n\n// each cell contains a value 1<=x<=9\nfor (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n        solver.add(cells[i][j].ge(1), cells[i][j].le(9));\n    }\n}\n\n// each row contains a digit only once\nfor (let i = 0; i < 9; i++) {\n    solver.add(Z3.Distinct(...cells[i]));\n}\n\n// each column contains a digit only once\nfor (let j = 0; j < 9; j++) {\n    const column = [];\n    for (let i = 0; i < 9; i++) {\n        column.push(cells[i][j]);\n    }\n    solver.add(Z3.Distinct(...column));\n}\n\n// each 3x3 contains a digit at most once\nfor (let iSquare = 0; iSquare < 3; iSquare++) {\n    for (let jSquare = 0; jSquare < 3; jSquare++) {\n        const square = [];\n\n        for (let i = iSquare * 3; i < iSquare * 3 + 3; i++) {\n            for (let j = jSquare * 3; j < jSquare * 3 + 3; j++) {\n                square.push(cells[i][j]);\n            }\n        }\n\n        solver.add(Z3.Distinct(...square));\n    }\n}\n\nfor (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n        const digit = INSTANCE[i][j];\n        if (digit !== null) {\n            solver.add(cells[i][j].eq(digit));\n        }\n    }\n}\n\nconst is_sat = await solver.check(); // sat\nconst model = solver.model() as Model;\nvar buffer = \"\";\n\nfor (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n        const v = model.eval(cells[i][j]);\n        buffer += `${v}`;\n    }\n    buffer += \"\\n\";\n}\nbuffer"}
