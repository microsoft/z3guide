{"input":"const x = Z3.BitVec.const('x', 32);\nconst y = Z3.BitVec.const('y', 32);\n\nconst solver = new Z3.Solver();\nconst conjecture = x.xor(y).sub(103).eq(x.mul(y));\nsolver.add(conjecture);\nconst is_sat = await solver.check(); // sat\n\nconst model = solver.model();\n\n// need the following cast for `asSignedValue` to work\nconst xSol = model.get(x) as BitVecNum;\nconst ySol = model.get(y) as BitVecNum;\n\n\nconst are_vals = Z3.isBitVecVal(xSol) && Z3.isBitVecVal(ySol); // true\n\nconst xv = xSol.asSignedValue();\nconst yv = ySol.asSignedValue();\n\n// this solutions wraps around so we need to check using modulo\nconst is_eq = (xv ^ yv) - 103n === (xv * yv) % 2n ** 32n; // true\n\n` is-sat: ${is_sat} solutions are values: ${are_vals} satisfy equality: ${is_eq}`"}
