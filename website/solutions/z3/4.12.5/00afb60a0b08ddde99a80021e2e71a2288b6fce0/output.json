{"output":"sat\n(\n  ;; universe for Ptr:\n  ;;   Ptr!val!3 Ptr!val!6 Ptr!val!2 Ptr!val!0 Ptr!val!8 Ptr!val!9 Ptr!val!10 Ptr!val!7 Ptr!val!5 Ptr!val!1 Ptr!val!4 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun Ptr!val!3 () Ptr)\n  (declare-fun Ptr!val!6 () Ptr)\n  (declare-fun Ptr!val!2 () Ptr)\n  (declare-fun Ptr!val!0 () Ptr)\n  (declare-fun Ptr!val!8 () Ptr)\n  (declare-fun Ptr!val!9 () Ptr)\n  (declare-fun Ptr!val!10 () Ptr)\n  (declare-fun Ptr!val!7 () Ptr)\n  (declare-fun Ptr!val!5 () Ptr)\n  (declare-fun Ptr!val!1 () Ptr)\n  (declare-fun Ptr!val!4 () Ptr)\n  ;; cardinality constraint:\n  (forall ((x Ptr))\n          (or (= x Ptr!val!3)\n              (= x Ptr!val!6)\n              (= x Ptr!val!2)\n              (= x Ptr!val!0)\n              (= x Ptr!val!8)\n              (= x Ptr!val!9)\n              (= x Ptr!val!10)\n              (= x Ptr!val!7)\n              (= x Ptr!val!5)\n              (= x Ptr!val!1)\n              (= x Ptr!val!4)))\n  ;; -----------\n  (define-fun SLP () Int\n    10)\n  (define-fun null () Ptr\n    Ptr!val!0)\n  (define-fun x () Ptr\n    Ptr!val!10)\n  (define-fun RUN () Int\n    2)\n  (define-fun prev ((x!0 Ptr)) Ptr\n    (let ((a!1 (or (and (= x!0 Ptr!val!5)\n                        (not (= x!0 Ptr!val!6))\n                        (not (= x!0 Ptr!val!7)))\n                   (and (= x!0 Ptr!val!0)\n                        (not (= x!0 Ptr!val!10))\n                        (not (= x!0 Ptr!val!9))\n                        (not (= x!0 Ptr!val!4))\n                        (not (= x!0 Ptr!val!5))\n                        (not (= x!0 Ptr!val!6))\n                        (not (= x!0 Ptr!val!7)))))\n          (a!2 (ite (and (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!1))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!4))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7)))\n                    Ptr!val!10\n                    Ptr!val!6)))\n    (let ((a!3 (ite (and (= x!0 Ptr!val!1)\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!4))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7)))\n                    Ptr!val!2\n                    a!2)))\n    (let ((a!4 (ite (and (= x!0 Ptr!val!3)\n                         (not (= x!0 Ptr!val!1))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!4))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7)))\n                    Ptr!val!1\n                    a!3)))\n    (let ((a!5 (ite (and (= x!0 Ptr!val!8)\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!4))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7)))\n                    Ptr!val!7\n                    (ite a!1 Ptr!val!4 a!4))))\n    (let ((a!6 (ite (and (= x!0 Ptr!val!9)\n                         (not (= x!0 Ptr!val!4))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7)))\n                    Ptr!val!0\n                    a!5)))\n    (let ((a!7 (ite (and (= x!0 Ptr!val!10)\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!4))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7)))\n                    Ptr!val!9\n                    a!6)))\n    (let ((a!8 (ite (and (= x!0 Ptr!val!4)\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7)))\n                    Ptr!val!0\n                    a!7)))\n      (ite (and (= x!0 Ptr!val!6) (not (= x!0 Ptr!val!7))) Ptr!val!5 a!8)))))))))\n  (define-fun k!29 ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!3) Ptr!val!3\n    (ite (= x!0 Ptr!val!1) Ptr!val!1\n    (ite (= x!0 Ptr!val!8) Ptr!val!8\n    (ite (= x!0 Ptr!val!0) Ptr!val!0\n    (ite (= x!0 Ptr!val!10) Ptr!val!10\n    (ite (= x!0 Ptr!val!9) Ptr!val!9\n    (ite (= x!0 Ptr!val!4) Ptr!val!4\n    (ite (= x!0 Ptr!val!5) Ptr!val!5\n    (ite (= x!0 Ptr!val!6) Ptr!val!6\n    (ite (= x!0 Ptr!val!7) Ptr!val!7\n      Ptr!val!2)))))))))))\n  (define-fun next ((x!0 Ptr)) Ptr\n    (let ((a!1 (ite (= (k!29 x!0) Ptr!val!1)\n                    Ptr!val!3\n                    (ite (= (k!29 x!0) Ptr!val!2) Ptr!val!1 Ptr!val!6))))\n    (let ((a!2 (ite (= (k!29 x!0) Ptr!val!4)\n                    Ptr!val!5\n                    (ite (= (k!29 x!0) Ptr!val!3) Ptr!val!0 a!1))))\n    (let ((a!3 (ite (= (k!29 x!0) Ptr!val!6)\n                    Ptr!val!7\n                    (ite (= (k!29 x!0) Ptr!val!0) Ptr!val!10 a!2))))\n    (let ((a!4 (ite (= (k!29 x!0) Ptr!val!8)\n                    Ptr!val!0\n                    (ite (= (k!29 x!0) Ptr!val!7) Ptr!val!8 a!3))))\n      (ite (= (k!29 x!0) Ptr!val!10)\n           Ptr!val!2\n           (ite (= (k!29 x!0) Ptr!val!9) Ptr!val!10 a!4)))))))\n  (define-fun new-prev ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!2) Ptr!val!10\n    (ite (= x!0 Ptr!val!1) Ptr!val!2\n    (ite (= x!0 Ptr!val!3) Ptr!val!1\n    (ite (= x!0 Ptr!val!0) Ptr!val!4\n    (ite (= x!0 Ptr!val!5) Ptr!val!4\n    (ite (= x!0 Ptr!val!9) Ptr!val!0\n    (ite (= x!0 Ptr!val!10) Ptr!val!9\n    (ite (= x!0 Ptr!val!4) Ptr!val!0\n    (ite (= x!0 Ptr!val!6) Ptr!val!5\n    (ite (= x!0 Ptr!val!8) Ptr!val!7\n    (ite (= x!0 Ptr!val!7) Ptr!val!6\n      (prev x!0)))))))))))))\n  (define-fun prio ((x!0 Ptr)) Int\n    (let ((a!1 (ite (or (= (k!29 x!0) Ptr!val!2)\n                        (= (k!29 x!0) Ptr!val!3)\n                        (= (k!29 x!0) Ptr!val!1))\n                    3\n                    13)))\n    (let ((a!2 (ite (= (k!29 x!0) Ptr!val!4)\n                    6\n                    (ite (= (k!29 x!0) Ptr!val!0) 4 a!1))))\n    (let ((a!3 (ite (= (k!29 x!0) Ptr!val!6)\n                    9\n                    (ite (= (k!29 x!0) Ptr!val!5) 7 a!2))))\n    (let ((a!4 (ite (or (= (k!29 x!0) Ptr!val!10) (= (k!29 x!0) Ptr!val!9))\n                    3\n                    a!3)))\n      (ite (= (k!29 x!0) Ptr!val!8) 12 (ite (= (k!29 x!0) Ptr!val!7) 11 a!4)))))))\n  (define-fun state ((x!0 Ptr)) Int\n    (let ((a!1 (ite (or (= (k!29 x!0) Ptr!val!2)\n                        (= (k!29 x!0) Ptr!val!3)\n                        (= (k!29 x!0) Ptr!val!1))\n                    2\n                    14)))\n    (let ((a!2 (ite (or (= (k!29 x!0) Ptr!val!6)\n                        (= (k!29 x!0) Ptr!val!5)\n                        (= (k!29 x!0) Ptr!val!4))\n                    8\n                    (ite (= (k!29 x!0) Ptr!val!0) 5 a!1))))\n    (let ((a!3 (ite (or (= (k!29 x!0) Ptr!val!10) (= (k!29 x!0) Ptr!val!9))\n                    2\n                    a!2)))\n      (ite (or (= (k!29 x!0) Ptr!val!7) (= (k!29 x!0) Ptr!val!8)) 8 a!3)))))\n  (define-fun new-next ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!2) Ptr!val!1\n    (ite (= x!0 Ptr!val!1) Ptr!val!3\n    (ite (= x!0 Ptr!val!3) Ptr!val!0\n    (ite (= x!0 Ptr!val!4) Ptr!val!5\n    (ite (= x!0 Ptr!val!0) Ptr!val!10\n    (ite (= x!0 Ptr!val!9) Ptr!val!2\n    (ite (= x!0 Ptr!val!10) Ptr!val!0\n    (ite (= x!0 Ptr!val!5) Ptr!val!6\n    (ite (= x!0 Ptr!val!8) Ptr!val!0\n    (ite (= x!0 Ptr!val!7) Ptr!val!8\n    (ite (= x!0 Ptr!val!6) Ptr!val!7\n      (next x!0)))))))))))))\n  (define-fun new-prio ((x!0 Ptr)) Int\n    (ite (= x!0 Ptr!val!1) 3\n    (ite (= x!0 Ptr!val!3) 3\n    (ite (= x!0 Ptr!val!2) 3\n    (ite (= x!0 Ptr!val!0) 4\n    (ite (= x!0 Ptr!val!5) 7\n    (ite (= x!0 Ptr!val!4) 6\n    (ite (= x!0 Ptr!val!9) 3\n    (ite (= x!0 Ptr!val!10) 3\n    (ite (= x!0 Ptr!val!6) 9\n    (ite (= x!0 Ptr!val!7) 11\n    (ite (= x!0 Ptr!val!8) 12\n      (prio x!0)))))))))))))\n  (define-fun new-state ((x!0 Ptr)) Int\n    (ite (= x!0 Ptr!val!1) 2\n    (ite (= x!0 Ptr!val!2) 2\n    (ite (= x!0 Ptr!val!3) 2\n    (ite (= x!0 Ptr!val!0) 5\n    (ite (= x!0 Ptr!val!5) 8\n    (ite (= x!0 Ptr!val!4) 8\n    (ite (= x!0 Ptr!val!9) 2\n    (ite (= x!0 Ptr!val!10) 10\n    (ite (= x!0 Ptr!val!6) 8\n    (ite (= x!0 Ptr!val!8) 8\n    (ite (= x!0 Ptr!val!7) 8\n      (state x!0)))))))))))))\n)\nWhy it is not valid\nTrying again using a fresh constant bad-ptr as an witness for the failure...\nsat\n(\n  ;; universe for Ptr:\n  ;;   Ptr!val!3 Ptr!val!6 Ptr!val!2 Ptr!val!0 Ptr!val!8 Ptr!val!9 Ptr!val!10 Ptr!val!7 Ptr!val!5 Ptr!val!1 Ptr!val!4 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun Ptr!val!3 () Ptr)\n  (declare-fun Ptr!val!6 () Ptr)\n  (declare-fun Ptr!val!2 () Ptr)\n  (declare-fun Ptr!val!0 () Ptr)\n  (declare-fun Ptr!val!8 () Ptr)\n  (declare-fun Ptr!val!9 () Ptr)\n  (declare-fun Ptr!val!10 () Ptr)\n  (declare-fun Ptr!val!7 () Ptr)\n  (declare-fun Ptr!val!5 () Ptr)\n  (declare-fun Ptr!val!1 () Ptr)\n  (declare-fun Ptr!val!4 () Ptr)\n  ;; cardinality constraint:\n  (forall ((x Ptr))\n          (or (= x Ptr!val!3)\n              (= x Ptr!val!6)\n              (= x Ptr!val!2)\n              (= x Ptr!val!0)\n              (= x Ptr!val!8)\n              (= x Ptr!val!9)\n              (= x Ptr!val!10)\n              (= x Ptr!val!7)\n              (= x Ptr!val!5)\n              (= x Ptr!val!1)\n              (= x Ptr!val!4)))\n  ;; -----------\n  (define-fun bad-ptr () Ptr\n    Ptr!val!2)\n  (define-fun SLP () Int\n    3)\n  (define-fun x () Ptr\n    Ptr!val!0)\n  (define-fun RUN () Int\n    2)\n  (define-fun null () Ptr\n    Ptr!val!1)\n  (define-fun prev ((x!0 Ptr)) Ptr\n    (let ((a!1 (or (and (= x!0 Ptr!val!7)\n                        (not (= x!0 Ptr!val!8))\n                        (not (= x!0 Ptr!val!9)))\n                   (and (= x!0 Ptr!val!1)\n                        (not (= x!0 Ptr!val!5))\n                        (not (= x!0 Ptr!val!6))\n                        (not (= x!0 Ptr!val!7))\n                        (not (= x!0 Ptr!val!8))\n                        (not (= x!0 Ptr!val!9)))))\n          (a!2 (ite (and (= x!0 Ptr!val!0)\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!1))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!9)))\n                    Ptr!val!2\n                    Ptr!val!1)))\n    (let ((a!3 (ite (and (not (= x!0 Ptr!val!4))\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!1))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!9)))\n                    Ptr!val!0\n                    a!2)))\n    (let ((a!4 (ite (and (= x!0 Ptr!val!4)\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!1))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!9)))\n                    Ptr!val!3\n                    a!3)))\n    (let ((a!5 (ite (and (= x!0 Ptr!val!5)\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!9)))\n                    Ptr!val!4\n                    a!4)))\n    (let ((a!6 (ite (and (= x!0 Ptr!val!8) (not (= x!0 Ptr!val!9)))\n                    Ptr!val!7\n                    (ite a!1 Ptr!val!6 a!5))))\n      (ite (and (= x!0 Ptr!val!10)\n                (not (= x!0 Ptr!val!2))\n                (not (= x!0 Ptr!val!1))\n                (not (= x!0 Ptr!val!5))\n                (not (= x!0 Ptr!val!6))\n                (not (= x!0 Ptr!val!7))\n                (not (= x!0 Ptr!val!8))\n                (not (= x!0 Ptr!val!9)))\n           Ptr!val!9\n           (ite (= x!0 Ptr!val!9) Ptr!val!8 a!6))))))))\n  (define-fun k!57 ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!4) Ptr!val!4\n    (ite (= x!0 Ptr!val!0) Ptr!val!0\n    (ite (= x!0 Ptr!val!10) Ptr!val!10\n    (ite (= x!0 Ptr!val!2) Ptr!val!2\n    (ite (= x!0 Ptr!val!1) Ptr!val!1\n    (ite (= x!0 Ptr!val!5) Ptr!val!5\n    (ite (= x!0 Ptr!val!6) Ptr!val!6\n    (ite (= x!0 Ptr!val!7) Ptr!val!7\n    (ite (= x!0 Ptr!val!8) Ptr!val!8\n    (ite (= x!0 Ptr!val!9) Ptr!val!9\n      Ptr!val!3)))))))))))\n  (define-fun next ((x!0 Ptr)) Ptr\n    (let ((a!1 (ite (= (k!57 x!0) Ptr!val!3)\n                    Ptr!val!4\n                    (ite (= (k!57 x!0) Ptr!val!0) Ptr!val!3 Ptr!val!0))))\n    (let ((a!2 (ite (= (k!57 x!0) Ptr!val!5)\n                    Ptr!val!1\n                    (ite (= (k!57 x!0) Ptr!val!4) Ptr!val!5 a!1))))\n    (let ((a!3 (ite (= (k!57 x!0) Ptr!val!7)\n                    Ptr!val!8\n                    (ite (= (k!57 x!0) Ptr!val!6) Ptr!val!7 a!2))))\n    (let ((a!4 (ite (= (k!57 x!0) Ptr!val!9)\n                    Ptr!val!10\n                    (ite (= (k!57 x!0) Ptr!val!8) Ptr!val!9 a!3))))\n      (ite (= (k!57 x!0) Ptr!val!10) Ptr!val!1 a!4))))))\n  (define-fun new-prev ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!0) Ptr!val!2\n    (ite (= x!0 Ptr!val!3) Ptr!val!0\n    (ite (= x!0 Ptr!val!4) Ptr!val!3\n    (ite (= x!0 Ptr!val!5) Ptr!val!4\n    (ite (= x!0 Ptr!val!1) Ptr!val!6\n    (ite (= x!0 Ptr!val!7) Ptr!val!6\n    (ite (= x!0 Ptr!val!2) Ptr!val!1\n    (ite (= x!0 Ptr!val!8) Ptr!val!7\n    (ite (= x!0 Ptr!val!10) Ptr!val!9\n    (ite (= x!0 Ptr!val!9) Ptr!val!8\n      (prev x!0))))))))))))\n  (define-fun prio ((x!0 Ptr)) Int\n    (let ((a!1 (ite (or (= (k!57 x!0) Ptr!val!3)\n                        (= (k!57 x!0) Ptr!val!2)\n                        (= (k!57 x!0) Ptr!val!4)\n                        (= (k!57 x!0) Ptr!val!0)\n                        (= (k!57 x!0) Ptr!val!5))\n                    4\n                    13)))\n    (let ((a!2 (ite (= (k!57 x!0) Ptr!val!6)\n                    7\n                    (ite (= (k!57 x!0) Ptr!val!1) 5 a!1))))\n    (let ((a!3 (ite (= (k!57 x!0) Ptr!val!8)\n                    10\n                    (ite (= (k!57 x!0) Ptr!val!7) 8 a!2))))\n      (ite (= (k!57 x!0) Ptr!val!9) 12 (ite (= (k!57 x!0) Ptr!val!10) 11 a!3))))))\n  (define-fun state ((x!0 Ptr)) Int\n    (let ((a!1 (ite (or (= (k!57 x!0) Ptr!val!3)\n                        (= (k!57 x!0) Ptr!val!2)\n                        (= (k!57 x!0) Ptr!val!4)\n                        (= (k!57 x!0) Ptr!val!0)\n                        (= (k!57 x!0) Ptr!val!5))\n                    2\n                    14)))\n      (ite (or (= (k!57 x!0) Ptr!val!10)\n               (= (k!57 x!0) Ptr!val!7)\n               (= (k!57 x!0) Ptr!val!8)\n               (= (k!57 x!0) Ptr!val!6)\n               (= (k!57 x!0) Ptr!val!9))\n           9\n           (ite (= (k!57 x!0) Ptr!val!1) 6 a!1))))\n  (define-fun new-next ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!0) Ptr!val!1\n    (ite (= x!0 Ptr!val!2) Ptr!val!3\n    (ite (= x!0 Ptr!val!3) Ptr!val!4\n    (ite (= x!0 Ptr!val!4) Ptr!val!5\n    (ite (= x!0 Ptr!val!5) Ptr!val!1\n    (ite (= x!0 Ptr!val!6) Ptr!val!7\n    (ite (= x!0 Ptr!val!1) Ptr!val!0\n    (ite (= x!0 Ptr!val!7) Ptr!val!8\n    (ite (= x!0 Ptr!val!10) Ptr!val!1\n    (ite (= x!0 Ptr!val!9) Ptr!val!10\n    (ite (= x!0 Ptr!val!8) Ptr!val!9\n      (next x!0)))))))))))))\n  (define-fun new-prio ((x!0 Ptr)) Int\n    (ite (= x!0 Ptr!val!3) 4\n    (ite (= x!0 Ptr!val!0) 4\n    (ite (= x!0 Ptr!val!4) 4\n    (ite (= x!0 Ptr!val!2) 4\n    (ite (= x!0 Ptr!val!5) 4\n    (ite (= x!0 Ptr!val!1) 5\n    (ite (= x!0 Ptr!val!7) 8\n    (ite (= x!0 Ptr!val!6) 7\n    (ite (= x!0 Ptr!val!8) 10\n    (ite (= x!0 Ptr!val!10) 11\n    (ite (= x!0 Ptr!val!9) 12\n      (prio x!0)))))))))))))\n  (define-fun new-state ((x!0 Ptr)) Int\n    (ite (= x!0 Ptr!val!0) 3\n    (ite (= x!0 Ptr!val!3) 2\n    (ite (= x!0 Ptr!val!2) 2\n    (ite (= x!0 Ptr!val!4) 2\n    (ite (= x!0 Ptr!val!5) 2\n    (ite (= x!0 Ptr!val!1) 6\n    (ite (= x!0 Ptr!val!7) 9\n    (ite (= x!0 Ptr!val!6) 9\n    (ite (= x!0 Ptr!val!8) 9\n    (ite (= x!0 Ptr!val!10) 9\n    (ite (= x!0 Ptr!val!9) 9\n      (state x!0)))))))))))))\n)\nnull is\nPtr!val!1\nbad-ptr is\nPtr!val!2\nIn the new state, bad-ptr.next is\nPtr!val!3\nIn the new state, bad-ptr.next.prev is\nPtr!val!0\n","error":"","status":"z3-ran","hash":"00afb60a0b08ddde99a80021e2e71a2288b6fce0"}
