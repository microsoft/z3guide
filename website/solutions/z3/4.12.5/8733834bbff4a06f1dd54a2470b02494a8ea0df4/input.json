{"input":"(set-option :produce-unsat-cores true)\n(set-option :smt.core.minimize true)\n(declare-datatypes () ((Type \n  int \n  string \n  (arrow (dom Type) (rng Type)))))\n(declare-sort Var)\n(declare-datatypes () ((M \n  (lam (bound Var) (body M)) \n  (var (v Var)) \n  (app (fn M) (arg M)))))\n(declare-fun type (M) Type)\n(declare-const x Var)\n(declare-const y Var)\n(define-fun dom ((M M)) Type (dom (type M)))\n(define-fun rng ((M M)) Type (rng (type M)))\n(define-fun type ((x Var)) Type (type (var x)))\n(define-fun app-constraint ((M1 M) (M2 M)) Bool\n  (and (= (dom M1) (type M2))\n       (is-arrow (type M1))\n       (= (type (app M1 M2)) (rng M1))\n  )\n)\n(define-fun lam-constraint ((x Var) (M M)) Bool\n  (= (type (lam x M)) (arrow (type x) (type M)))\n)\n\n(declare-const plus M)\n(assert (= (type plus) (arrow int (arrow int int))))\n(declare-fun ofint (Int) M)\n(declare-fun ofstring (String) M)\n(define-const x_plus_3 M (app (app plus (var x)) (ofint 3)))\n\n(assert (= (type (ofint 3)) int))\n(assert (= (type (ofstring \"a\")) string))\n\n(assert (! (app-constraint (lam x x_plus_3) (ofstring \"a\")) :named t1))\n(assert (! (lam-constraint x x_plus_3)                      :named t2))\n(assert (! (app-constraint (app plus (var x)) (ofint 3))    :named t3))\n(assert (! (app-constraint plus (var x))                    :named t4))\n(check-sat)\n(get-unsat-core)"}
