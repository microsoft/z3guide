{"input":"(define-fun popcount4 ((v (_ BitVec 4))) (_ BitVec 32)\n    (bvadd\n      ((_ zero_extend 31) ((_ extract 0 0) v))\n      ((_ zero_extend 31) ((_ extract 1 1) v))\n      ((_ zero_extend 31) ((_ extract 2 2) v))\n      ((_ zero_extend 31) ((_ extract 3 3) v))\n    )\n)\n\n(define-fun popcount8 ((v (_ BitVec 8))) (_ BitVec 32)\n   (bvadd (popcount4 ((_ extract 7 4) v)) (popcount4 ((_ extract 3 0) v)))\n)\n\n(define-fun popcount16 ((v (_ BitVec 16))) (_ BitVec 32)\n   (bvadd (popcount8 ((_ extract 15 8) v)) \n          (popcount8 ((_ extract 7 0) v)))\n)\n\n(define-fun popcount32_b ((v (_ BitVec 32))) (_ BitVec 32)\n   (bvadd (popcount16 ((_ extract 31 16) v))\n          (popcount16 ((_ extract 15 0) v)))\n)\n\n(define-fun popcount32_a ((v (_ BitVec 32))) (_ BitVec 32)\n   (let ((v (bvsub v (bvand (bvlshr v (_ bv1 32)) #x55555555))))\n   (let ((v (bvadd (bvand v #x33333333) (bvand (bvlshr v (_ bv2 32)) #x33333333))))\n   (bvlshr (bvmul (bvand (bvadd v (bvlshr v (_ bv4 32))) #x0F0F0F0F) #x01010101) (_ bv24 32)))\n   )\n)\n\n\n(declare-const x (_ BitVec 32))\n\n(assert (not (= (popcount32_a x) (popcount32_b x))))\n\n(check-sat)\n"}
