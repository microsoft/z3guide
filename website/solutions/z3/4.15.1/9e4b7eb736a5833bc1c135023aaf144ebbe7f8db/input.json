{"input":"(set-option :smt.mbqi true)\n(set-option :model.compact true)\n\n;; A0, A1, A2, A3, A4 are \"arrays\" from Integers to Integers.\n(declare-fun A0 (Int) Int) (declare-fun A1 (Int) Int)\n(declare-fun A2 (Int) Int) (declare-fun A3 (Int) Int)\n(declare-fun A4 (Int) Int) \n(declare-const n Int) (declare-const l Int)\n(declare-const k Int) (declare-const x Int)\n(declare-const y Int) (declare-const w Int)\n(declare-const z Int)\n\n;; A1 = A0[k <- w]\n(assert (= (A1 k) w))\n(assert (forall ((x Int)) (or (= x k) (= (A1 x) (A0 x)))))\n\n;; A2 = A1[l <- x] = A0[k <- w][l <- x]\n(assert (= (A2 l) x))\n(assert (forall ((x Int)) (or (= x l) (= (A2 x) (A1 x)))))\n\n;; A3 = A0[k <- y]\n(assert (= (A3 k) y))\n(assert (forall ((x Int)) (or (= x k) (= (A3 x) (A0 x)))))\n\n;; A4 = A3[l <- z] = A0[k <- y][l <- z] \n(assert (= (A3 l) z))\n(assert (forall ((x Int)) (or (= x l) (= (A4 x) (A3 x)))))\n\n(assert (and (< w x) (< x y) (< y z)))\n(assert (and (< 0 k) (< k l) (< l n)))\n(assert (> (- l k) 1))\n\n;; A2 is sorted in the interval [0,n-1]\n(assert (forall ((i Int) (j Int))\n                (=> (and (<= 0 i) (<= i j) (<= j (- n 1)))\n                    (<= (A2 i) (A2 j)))))\n\n(check-sat)\n(get-model)\n\n;; A4 is sorted in the interval [0,n-1]\n(assert (forall ((i Int) (j Int))\n                (=> (and (<= 0 i) (<= i j) (<= j (- n 1)))\n                    (<= (A4 i) (A4 j)))))\n\n(check-sat)"}
