{"input":"(declare-sort Inhabitant)\n(declare-datatype Statement (truth falsity))\n(declare-datatype Identity (Knave Knight))\n(declare-const John Inhabitant)\n(declare-const Bill Inhabitant)\n(declare-fun Is (Inhabitant Identity) Statement)\n(declare-fun Says (Inhabitant Statement) Bool)\n(declare-fun Holds (Statement) Bool)\n(assert (Holds truth))\n(assert (not (Holds falsity)))\n(assert (forall ((x Inhabitant)) (xor (Holds (Is x Knave)) (Holds (Is x Knight)))))\n(assert (forall ((x Inhabitant) (y Statement)) (=> (Holds (Is x Knave)) (Says x y) (not (Holds y)))))\n(assert (forall ((x Inhabitant) (y Statement)) (=> (Holds (Is x Knight)) (Says x y) (Holds y))))\n\n; Question 1\n; John says: We are both knaves\n; Who is what?\n\n(push)\n(declare-fun And (Statement Statement) Statement)\n(assert (forall ((x Statement) (y Statement)) (= (Holds (And x y)) (and (Holds x) (Holds y)))))\n(assert (Says John (And (Is John Knave) (Is Bill Knave))))\n(check-sat)\n(eval (Holds (Is John Knight)))\n(eval (Holds (Is Bill Knight)))\n(pop)\n\n\n; Question 2\n; John: If (and only if) Bill is a knave, then I am a knave.\n; Bill: We are of different kinds.\n; Who is who?\n\n(push)\n\n(declare-fun Not (Statement) Statement)\n(declare-fun Iff (Statement Statement) Statement)\n(assert (forall ((x Statement)) (= (Holds (Not x)) (not (Holds x)))))\n(assert (forall ((x Statement) (y Statement)) (= (Holds (Iff x y)) (= (Holds x) (Holds y)))))\n\n(assert (Says John (Iff (Is Bill Knave) (Is John Knave))))\n(assert (Says Bill (Not (Iff (Is Bill Knave) (Is John Knave)))))\n(check-sat)\n(eval (Holds (Is John Knight)))\n(eval (Holds (Is Bill Knight)))\n(pop)\n"}
