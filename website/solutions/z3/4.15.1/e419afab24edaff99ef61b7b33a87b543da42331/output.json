{"output":"sat\n(objectives\n ( 1)\n)\n((t1 false)\n (t2 true)\n (t3 true)\n (t4 true))\n(\n  ;; universe for Var:\n  ;;   Var!val!2 Var!val!0 Var!val!3 Var!val!1 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun Var!val!2 () Var)\n  (declare-fun Var!val!0 () Var)\n  (declare-fun Var!val!3 () Var)\n  (declare-fun Var!val!1 () Var)\n  ;; cardinality constraint:\n  (forall ((x Var))\n          (or (= x Var!val!2) (= x Var!val!0) (= x Var!val!3) (= x Var!val!1)))\n  ;; -----------\n  (define-fun x () Var\n    Var!val!0)\n  (define-fun plus () M\n    (var Var!val!3))\n  (define-fun x_plus_3 () M\n    (app (app plus (var x)) (ofint 3)))\n  (define-fun t3 () Bool\n    true)\n  (define-fun t4 () Bool\n    true)\n  (define-fun t1 () Bool\n    false)\n  (define-fun t2 () Bool\n    true)\n  (define-fun y () Var\n    Var!val!2)\n  (define-fun type ((x!0 M)) Type\n    (ite (= x!0 (var Var!val!3)) (arrow int (arrow int int))\n    (ite (= x!0 (var Var!val!1)) string\n    (ite (= x!0\n            (lam Var!val!0\n                 (app (app (var Var!val!3) (var Var!val!0)) (var Var!val!2))))\n      (arrow int int)\n    (ite (= x!0 (app (var Var!val!3) (var Var!val!0))) (arrow int int)\n      int)))))\n  (define-fun ofint ((x!0 Int)) M\n    (var Var!val!2))\n  (define-fun ofstring ((x!0 String)) M\n    (var Var!val!1))\n)\n","error":"","status":"z3-ran","hash":"e419afab24edaff99ef61b7b33a87b543da42331"}
