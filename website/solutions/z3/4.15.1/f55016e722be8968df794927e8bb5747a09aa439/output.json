{"output":"sat\n(\n  ;; universe for T:\n  ;;   T!val!3 T!val!4 T!val!0 T!val!2 T!val!1 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun T!val!3 () T)\n  (declare-fun T!val!4 () T)\n  (declare-fun T!val!0 () T)\n  (declare-fun T!val!2 () T)\n  (declare-fun T!val!1 () T)\n  ;; cardinality constraint:\n  (forall ((x T))\n          (or (= x T!val!3)\n              (= x T!val!4)\n              (= x T!val!0)\n              (= x T!val!2)\n              (= x T!val!1)))\n  ;; -----------\n  (define-fun string-type () T\n    T!val!3)\n  (define-fun int-type () T\n    T!val!0)\n  (define-fun complex-type () T\n    T!val!2)\n  (define-fun real-type () T\n    T!val!1)\n  (define-fun obj-type () T\n    T!val!4)\n  (define-fun root-type () T\n    T!val!4)\n  (define-fun subtype ((x!0 T) (x!1 T)) Bool\n    (let ((a!1 (not (and (= x!0 T!val!2)\n                         (not (= x!0 T!val!1))\n                         (not (= x!0 T!val!4))\n                         (= x!1 T!val!0)\n                         (not (= x!1 T!val!2))\n                         (not (= x!1 T!val!1))\n                         (not (= x!1 T!val!4)))))\n          (a!2 (not (and (= x!0 T!val!4)\n                         (not (= x!1 T!val!0))\n                         (not (= x!1 T!val!2))\n                         (not (= x!1 T!val!1))\n                         (not (= x!1 T!val!4)))))\n          (a!3 (not (and (= x!0 T!val!1)\n                         (not (= x!0 T!val!4))\n                         (= x!1 T!val!0)\n                         (not (= x!1 T!val!2))\n                         (not (= x!1 T!val!1))\n                         (not (= x!1 T!val!4)))))\n          (a!4 (not (and (= x!0 T!val!4)\n                         (= x!1 T!val!0)\n                         (not (= x!1 T!val!2))\n                         (not (= x!1 T!val!1))\n                         (not (= x!1 T!val!4)))))\n          (a!5 (not (and (= x!0 T!val!4)\n                         (= x!1 T!val!2)\n                         (not (= x!1 T!val!1))\n                         (not (= x!1 T!val!4)))))\n          (a!6 (not (and (= x!0 T!val!2)\n                         (not (= x!0 T!val!1))\n                         (not (= x!0 T!val!4))\n                         (= x!1 T!val!1)\n                         (not (= x!1 T!val!4)))))\n          (a!7 (not (and (= x!0 T!val!4) (= x!1 T!val!1) (not (= x!1 T!val!4)))))\n          (a!8 (not (and (not (= x!0 T!val!0))\n                         (not (= x!0 T!val!2))\n                         (not (= x!0 T!val!1))\n                         (not (= x!0 T!val!4))\n                         (= x!1 T!val!0)\n                         (not (= x!1 T!val!2))\n                         (not (= x!1 T!val!1))\n                         (not (= x!1 T!val!4)))))\n          (a!9 (not (and (not (= x!0 T!val!0))\n                         (not (= x!0 T!val!2))\n                         (not (= x!0 T!val!1))\n                         (not (= x!0 T!val!4))\n                         (= x!1 T!val!2)\n                         (not (= x!1 T!val!1))\n                         (not (= x!1 T!val!4)))))\n          (a!10 (not (and (not (= x!0 T!val!0))\n                          (not (= x!0 T!val!2))\n                          (not (= x!0 T!val!1))\n                          (not (= x!0 T!val!4))\n                          (= x!1 T!val!1)\n                          (not (= x!1 T!val!4))))))\n      (and a!1 a!2 a!3 a!4 a!5 a!6 a!7 a!8 a!9 a!10)))\n)\nIs int-type a subtype of complex-type?\ntrue\nIs int-type = obj-type?\nfalse\nIs int-type a subtype of root-type?\ntrue\nIs root-type = obj-type?\ntrue\n","error":"","status":"z3-ran","hash":"f55016e722be8968df794927e8bb5747a09aa439"}
